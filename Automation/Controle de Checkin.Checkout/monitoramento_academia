import pandas as pd
from datetime import datetime
import os

# Vari√°veis globais
DATA_PATH = "gym_access_log.csv"
CHECKOUT_PATH = "gym_checkout_log.csv"

# Fun√ß√£o para carregar o log de acessos
def load_data():
    if os.path.exists(DATA_PATH):
        return pd.read_csv(DATA_PATH, parse_dates=['timestamp'], dtype={'cpf': str})
    else:
        return pd.DataFrame(columns=['timestamp', 'cpf'])

# Fun√ß√£o para carregar o log de check-outs
def load_checkout_data():
    if os.path.exists(CHECKOUT_PATH):
        return pd.read_csv(CHECKOUT_PATH, parse_dates=['timestamp'], dtype={'cpf': str})
    else:
        return pd.DataFrame(columns=['timestamp', 'cpf'])

# Fun√ß√£o para salvar os logs de acesso
def save_data(df, path):
    df.to_csv(path, index=False)

# Fun√ß√£o para registrar entrada
def register_access(cpf):
    df = load_data()
    new_entry = pd.DataFrame({'timestamp': [datetime.now()], 'cpf': [cpf]})
    df = pd.concat([df, new_entry], ignore_index=True)
    save_data(df, DATA_PATH)
    print("‚úÖ Entrada registrada com sucesso!\n")

# Fun√ß√£o para registrar sa√≠da
def register_checkout(cpf):
    df_access = load_data()
    df_checkout = load_checkout_data()

    # Converte CPFs para strings (evita erros de compara√ß√£o)
    df_access['cpf'] = df_access['cpf'].astype(str)
    df_checkout['cpf'] = df_checkout['cpf'].astype(str)

    # Verifica se o CPF tem um check-in ativo (sem check-out correspondente)
    if not df_access.empty and cpf in df_access['cpf'].tolist() and cpf not in df_checkout['cpf'].tolist():
        new_entry = pd.DataFrame({'timestamp': [datetime.now()], 'cpf': [cpf]})
        df_checkout = pd.concat([df_checkout, new_entry], ignore_index=True)
        save_data(df_checkout, CHECKOUT_PATH)
        print("‚úÖ Check-out registrado com sucesso!\n")
    else:
        print("‚ùå Erro: Nenhum check-in ativo encontrado para esse CPF.\n")

# Loop infinito para manter o sistema rodando automaticamente
while True:
    # Loop para garantir que o usu√°rio escolha 1 ou 2
    while True:
        option = input("üîπ Digite 1 para registrar entrada\nüîπ Digite 2 para registrar sa√≠da\nüîπ Op√ß√£o: ")
        if option in ["1", "2"]:
            break
        print("‚ùå Erro: Escolha inv√°lida. Digite '1' para entrada ou '2' para sa√≠da.\n")

    # Loop para garantir que o CPF tenha exatamente 6 d√≠gitos num√©ricos
    while True:
        cpf = input("üîπ Digite os 6 primeiros d√≠gitos do CPF: ")
        if len(cpf) == 6 and cpf.isdigit():
            break
        print("‚ùå Erro: O CPF deve ter exatamente 6 n√∫meros.\n")

    if option == "1":
        register_access(cpf)
    elif option == "2":
        register_checkout(cpf)